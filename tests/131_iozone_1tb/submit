#!/bin/sh

# Test settings
BASE=/home/projects/benchmarks/workload
test=131_iozone_1tb
failmetric="360000"

# run on any host
target=1
# run on host specified on command line
pbsname="$test"
if [ x"$1" != x ] ; then target="host=$1" ; pbsname="${test}_${1}" ; fi

# Environment settings
PATH="${PATH}:/app/pbs/bin:/opt/pbs/bin" ; export PATH

# Script settings
d=`date +%Y/%m/%d/%H/%M/%S`
rundir="$BASE/run/$d/$test"
bindir="$BASE/data/bin"
tmp=tmp
script=run.pbs
csv="$BASE/results.csv"

# Only have one test in queue at a time
tst="" #tst=`qstat | awk '{if ( $2 == "'$pbsname'" ) {print $0}}'`
if [ x"$tst" != x ] ; then exit ; fi

# Prepare and submit test
mkdir -p $rundir && cd $rundir || exit

cat << EOF > run.pbs
#!/bin/bash
#PBS -N $pbsname
#%@FUJITSU:NSCC:CONTINUOUS_PERFORMANCE_TESTING@%#
#PBS -l select=${target}:ncpus=24${SELECT_GPU}:mem=96gb
#PBS -l walltime=24:00:00
#PBS -j oe
#PBS -P 90000001

set -e
failmetric="$failmetric"
PATH="/app/benchmarks/iozone3_471/bin:\$PATH" ; export PATH

if [ -d "\$PBS_O_WORKDIR" ] ; then cd "\$PBS_O_WORKDIR" ; fi
workdir="\$PWD"
echo == env
env
echo == ulimit
ulimit -a


# start timing
date
start=\`date +%s\`

r=1m
lustre_dir=/scratch/projects/benchmarks/workload/$test.\$PBS_JOBID

runbench(){
 sync
 $bindir/drop_caches
 memhog 95g > /dev/null
 t=\$1
 s=\$2
 i=\$3
 echo Lustre iteration \$i for size \$s with record \$r
 mkdir -p "\$lustre_dir" && \
 cd "\$lustre_dir" && \
 time iozone -c -e -P 0 -t \$t -i 0 -i 1 -s \$s -r \$r > "\$workdir"/iozone.lustre.\${t}t.\$s.\$r.\$PBS_JOBID.\$i
 cd "\$workdir" && rm -rf "\$lustre_dir"
}

for s in 1g 10g 100g 1000g ; do
 for t in 1 24 ; do
  for i in 0 1 2 ; do
   runbench \$t \$s \$i
  done
 done
done

# end timing
date
end=\`date +%s\`
((timing=end-start))
echo metric=\"\$timing\"

echo time spent: \$timing seconds
echo threshold for failure: \$failmetric seconds
echo metric: \$metric
echo \$metric | awk '{if ( \$1 > '\$failmetric' ) {printf "FAIL\n"}}' | grep FAIL && exit 1
echo \$metric | awk '{if ( \$1 <= '\$failmetric' ) {printf "PASS\n"}}' | grep PASS
EOF

jobid=`qsub $QSUB_ARGS run.pbs`
if [ x"$ECHO_JOBID" != x ] ; then echo $jobid ; fi
echo "$test , $jobid , Q , STIME , UNKNOWN , 0 , 00:00:00 , 0.0 , HOSTNAME , $PWD " >> "$csv"
