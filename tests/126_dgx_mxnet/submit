#!/bin/sh

# Test settings
BASE=/home/projects/benchmarks/workload
test=126_dgx_mxnet
failmetric=2500.0
i_latest="nvcr.io/nvidia/mxnet:latest"
image=${IMAGE:-$i_latest}

dockerarg="$DOCKERARGV"
###dockerarg="$dockerarg --lustre"

# run on any host
target=1
# run on host specified on command line
pbsname="$test"
if [ x"$1" != x ] ; then target="host=$1" ; pbsname="${test}_${1}" ; fi

# Environment settings
PATH="${PATH}:/app/pbs/bin:/opt/pbs/bin" ; export PATH

# Script settings
d=`date +%Y/%m/%d/%H/%M/%S`
rundir="$BASE/run/$d/$test"
datadir="$BASE/data/$test"
script=run.pbs
csv="$BASE/results.csv"

tst=""
if [ x"$MULTI" == x ] ; then
 # Only have one test in queue at a time
 tst=`qstat | awk '{if ( $2 == "'$pbsname'" ) {print $0}}'`
fi
if [ x"$tst" != x ] ; then exit ; fi

# Prepare and submit test
mkdir -p $rundir && cd $rundir || exit

cat << EOF > run.pbs
#!/bin/bash
#PBS -N $pbsname
#%@FUJITSU:NSCC:CONTINUOUS_PERFORMANCE_TESTING@%#
#PBS -l select=${target}:ncpus=40:ngpus=8
#PBS -q dgx
#PBS -l walltime=0:10:00
#PBS -j oe
#PBS -P 90000001
set -e
env
nvidia-smi
image="$image"
if [ -d "\$PBS_O_WORKDIR" ] ; then cd "\$PBS_O_WORKDIR" ; fi
nscc-docker images
nscc-docker run $dockerarg \$image < stdin > stdout.\$PBS_JOBID 2> stderr.\$PBS_JOBID
fgrep 'INFO:root:Epoch[0] Train-accuracy' stderr.\$PBS_JOBID || { echo job fail ; echo FAIL ; exit 1 ; }
failmetric="$failmetric"
metric=\`grep 'Speed: .* samples/sec'  stderr.\$PBS_JOBID | sed -e 's/^.*Speed: //' -e 's/ .*//' | sort -n | tail -n 1\`
echo metric=\"\$metric\"
echo check performance
echo threshold: \$failmetric
echo metric: \$metric
echo \$metric | awk '{if ( \$1 < '\$failmetric' ) {printf "PASS\n"}}' | grep PASS
EOF

cat << EOF > stdin
datadir=/home/projects/ai/datasets/mxnet480
python /opt/mxnet/example/image-classification/train_imagenet.py \
 --gpu 0,1,2,3,4,5,6,7 \
 --batch-size 512 --num-epochs 1 \
 --data-train \$datadir/train_480_100k.rec \
 --data-train-idx \$datadir/train_480_100k.idx \
 --disp-batches 10 --network resnet-v1 \
 --num-layers 50 --data-nthreads 32 --min-random-scale 0.533 --max-random-shear-ratio 0 --max-random-rotate-angle 0 --kv-store nccl_allreduce
EOF

jobid=`qsub $QSUB_ARGS run.pbs`
if [ x"$ECHO_JOBID" != x ] ; then echo $jobid ; fi
echo "$test , $jobid , Q , STIME , UNKNOWN , 0 , 00:00:00 , 0.0 , HOSTNAME , $PWD " >> "$csv"
