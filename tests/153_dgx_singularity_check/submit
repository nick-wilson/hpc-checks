#!/bin/sh

# Test settings
BASE=/home/projects/benchmarks/workload
test=153_dgx_singularity_check
i_latest="nvcr.io/nvidia/tensorflow:latest"
image=${IMAGE:-$i_latest}

# run on any host
target=1
# run on host specified on command line
pbsname="$test"
if [ x"$1" != x ] ; then target="host=$1" ; pbsname="${test}_${1}" ; fi

# Environment settings
PATH="${PATH}:/app/pbs/bin:/opt/pbs/bin" ; export PATH

# Script settings
d=`date +%Y/%m/%d/%H/%M/%S`
rundir="$BASE/run/$d/$test"
datadir="$BASE/data/$test"
script=run.pbs
csv="$BASE/results.csv"

tst=""
if [ x"$MULTI" == x ] ; then
 # Only have one test in queue at a time
 qname="${pbsname:0:15}"
 tst=`qstat | awk '{if ( $2 == "'$qname'" ) {print $0}}'`
fi
if [ x"$tst" != x ] ; then exit ; fi

# Prepare and submit test
mkdir -p $rundir && cd $rundir || exit

cat << EOF > run.pbs
#!/bin/bash
#PBS -N $pbsname
#%@FUJITSUSCC:CONTINUOUS_PERFORMANCE_TESTING@%#
#PBS -l select=${target}:ncpus=5:ngpus=1
#PBS -q dgx
#PBS -l walltime=0:05:00
#PBS -j oe
#PBS -P 90000001
set -e
if [ -d "\$PBS_O_WORKDIR" ] ; then cd "\$PBS_O_WORKDIR" ; fi
env
free
ps -ef
nvidia-smi
image="$image"
image="\$SINGULARITY_IMAGES/\$image.sif"
if [ ! -f "\$image" ] ; then image="\$SINGULARITY_IMAGES/\$image.simg" ; fi
ls -l "\$image"
md5sum "\$image"
if [ x"\$PBS_JOBID" == x ] ; then echo PBS_JOBID unset ; echo FAIL ; exit 1 ; fi
singularity exec --nv "\$image" /bin/bash < stdin > stdout.\$PBS_JOBID 2> stderr.\$PBS_JOBID
grep /home/projects stdout.\$PBS_JOBID || { echo /home not mounted ; echo FAIL ; exit 1 ; }
grep /raid/.test/README stdout.\$PBS_JOBID || { echo /raid not mounted ; echo FAIL ; exit 1 ; }
grep /scratch/.test/README stdout.\$PBS_JOBID || { echo /scratch not mounted ; echo FAIL ; exit 1 ; }
egrep '^uid=.*groups=.*,110029' stdout.\$PBS_JOBID || { echo group error ; echo FAIL ; exit 1 ; }
nvidia-smi|grep Tesla || { echo nvidia-smi error ; echo FAIL ; exit 1 ; }
n=\`nvidia-smi|grep Tesla|wc -l\`
if [ \$n -ne 1 ] ; then echo cgroup error ; echo FAIL ; exit 1 ; fi
n=\`grep Tesla stdout.\$PBS_JOBID | wc -l\`
if [ \$n -ne 1 ] ; then echo cgroup error in container ; echo FAIL ; exit 1 ; fi
echo PASS
EOF
cat << EOF > stdin
ls -ld /raid/.test/README /home/projects /scratch/.test/README
nvidia-smi
id
EOF

jobid=`qsub $QSUB_ARGS run.pbs`
if [ x"$ECHO_JOBID" != x ] ; then echo $jobid ; fi
echo "$test , $jobid , Q , STIME , UNKNOWN , 0 , 00:00:00 , 0.0 , HOSTNAME , $PWD " >> "$csv"
