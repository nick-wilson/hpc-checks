#!/bin/sh
# iozone I/O benchmark using DDN IME storage

# Test settings
BASE=/home/projects/benchmarks/workload
test=138_iozone_ime_fuse
failmetric="1500"

# run on any host
target=1
# run on host specified on command line
pbsname="$test"
if [ x"$1" != x ] ; then target="host=$1" ; pbsname="${test}_${1}" ; fi

# Environment settings
PATH="${PATH}:/app/pbs/bin:/opt/pbs/bin" ; export PATH

# Script settings
d=`date +%Y/%m/%d/%H/%M/%S`
rundir="$BASE/run/$d/$test"
bindir="$BASE/data/bin"
tmp=tmp
script=run.pbs
csv="$BASE/results.csv"

tst=""
if [ x"$MULTI" == x ] ; then
 # Only have one test in queue at a time
 qname="${pbsname:0:15}"
 tst=`qstat | awk '{if ( $2 == "'$qname'" ) {print $0}}'`
fi
if [ x"$tst" != x ] ; then exit ; fi

# Prepare and submit test
mkdir -p $rundir && cd $rundir || exit

cat << EOF > run.pbs
#!/bin/bash
#PBS -N $pbsname
#%@FUJITSU:NSCC:CONTINUOUS_PERFORMANCE_TESTING@%#
#PBS -l select=${target}:ncpus=24${SELECT_GPU}:mem=96gb
#PBS -l walltime=1:00:00
#PBS -j oe
#PBS -P 90000001

failmetric="$failmetric"
PATH="/app/benchmarks/iozone3_471/bin:\$PATH" ; export PATH

if [ -d "\$PBS_O_WORKDIR" ] ; then cd "\$PBS_O_WORKDIR" ; fi
workdir="\$PWD"

echo == env
env
echo == ulimit
ulimit -a

$bindir/drop_caches
memhog 95g > /dev/null
for f in meminfo buddyinfo vmstat zoneinfo ; do cat /proc/\$f > proc.\$f ; done
numastat -n > numastat-n
numastat -m > numastat-m
cat /sys/kernel/debug/extfrag/extfrag_index > extfrag_index

# start timing
date
start=\`date +%s\`

# start region where errors cause job to exit
set -e

ime_uri="projects/benchmarks/workload/$test.\$PBS_JOBID"
ime_dir="/ime/\$ime_uri"
mkdir -p "\$ime_dir" && \
 cd "\$ime_dir" && \
 iozone -Race > /dev/null && \
 for i in 0 1 2 ; do
  echo Lustre iteration \$i
  time iozone -Ra > "\$workdir"/iozone.ime.Ra.\$i
  time iozone -Race > "\$workdir"/iozone.ime.Race.\$i
 done
 date
 int=\`date +%s\`
 time ime-sync -b -r "\$ime_dir"
 time ime-release -r "\$ime_dir"
cd "\$workdir" && rm -rf "\$ime_dir"

# end region where errors cause job to exit
set +e

# end timing
date
end=\`date +%s\`
((timing=end-start))
((timing1=int-start))
((timing2=end-int))

echo time spent: \$timing seconds
echo time spent in iozone: \$timing1 seconds
echo time spent in ime-sync and ime-release: \$timing2 seconds
echo threshold for failure: \$failmetric seconds
echo metric=\"\$timing\"
echo \$metric | awk '{if ( \$1 > '\$failmetric' ) {printf "FAIL\n"}}' | grep FAIL && exit 1
echo \$metric | awk '{if ( \$1 <= '\$failmetric' ) {printf "PASS\n"}}' | grep PASS
EOF

jobid=`qsub $QSUB_ARGS run.pbs`
if [ x"$ECHO_JOBID" != x ] ; then echo $jobid ; fi
echo "$test , $jobid , Q , STIME , UNKNOWN , 0 , 00:00:00 , 0.0 , HOSTNAME , $PWD " >> "$csv"
